<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Checkout</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11.1.9/dist/sweetalert2.all.min.js"></script>

</head>

<body class="bg-gray-50">

    <!-- Header Section -->
    <%- include('../partials/user-header') %>

        <!-- Main Content -->
        <main class="container mx-auto px-4 py-8">
            <h2 class="text-lg font-bold mb-4">My Cart</h2>
            <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
                <!-- Cart Table -->
                <section class="col-span-2">
                    <h2> ADDRESSES AND PAYMENT OPTIONS</h2>
                    <!-- Add address button -->
                    <div class="p-6">
                        <button id="openAddAddressModalButton" class="bg-blue-500 text-white py-2 px-4 rounded">Add New
                            Address</button>
                    </div>
                    <!-- List of addresses -->
                    <% if (addresses && addresses.length> 0) { %>
                        <div class="flex flex-wrap mt-4 mx-4">
                            <% addresses.forEach(address=> { %>
                                <div class="w-full md:w-1/2 px-4 mb-4">
                                    
                                    <div class="bg-white p-4 rounded-lg shadow-sm border border-gray-200">
                                        <input type="radio" name="selectedAddress" value="<%= address._id %>" class="mt-1">

                                        <p>
                                            <strong>Name:</strong>
                                            <%= address.Name %>
                                        </p>
                                        <p>
                                            <strong>House:</strong>
                                            <%= address.HouseName %>
                                        </p>
                                        <p>
                                            <strong>Street/Locality:</strong>
                                            <%= address.LocalityStreet %>
                                        </p>
                                        <p>
                                            <strong>Town/City:</strong>
                                            <%= address.TownCity %>
                                        </p>
                                        <p>
                                            <strong>State:</strong>
                                            <%= address.state %>
                                        </p>
                                        <p>
                                            <strong>Country:</strong>
                                            <%= address.country %>
                                        </p>
                                        <p>
                                            <strong>Pincode:</strong>
                                            <%= address.pincode %>
                                        </p>
                                        <p>
                                            <strong>Mobile:</strong>
                                            <%= address.MobileNumber %>
                                        </p>

                                        <div class="mt-2 space-x-2">
                                            <button class="text-blue-500 hover:underline"
                                                onclick="openEditModal('<%= address._id %>')">
                                                Edit
                                            </button>

                                            <a href="#" class="deleteAddress text-red-500 hover:underline"
                                                data-id="<%= address._id %>">Delete</a>
                                        </div>
                                    </div>
                                </div>
                                <% }); %>
                        </div>
                        <% } else { %>
                            <div class="bg-gray-100 p-4 rounded-lg">
                                <p>No addresses found.</p>
                            </div>
                            <% } %>
                           </section>



                 
                <section class="col-span-1">
                    <!-- Payment Mode Section -->

                    <div class="w-full max-w-md p-6 mb-8 bg-white rounded-md shadow-lg">
                        <h2 class="text-xl font-semibold text-gray-700 mb-4">Payment Mode</h2>
                        <form>
                            <!-- Dropdown -->
                            <div class="relative">
                              <select 
                               id="paymentMethod"
                                name="paymentMethod" 
                                class="block w-full bg-gray-200 border border-gray-300 text-gray-700 p-3 rounded appearance-none focus:outline-none focus:ring-2 focus:ring-gray-500">
                                <option value="" disabled selected>Select Payment Mode</option>
                                <option value="cash on delivery" >Cash On Delivery</option>
                                <option value="razorpay" >Razorpay</option>
                                <option value="wallet" >Wallet</option>
                            </select>
                              <!-- Dropdown arrow -->
                              <div class="absolute inset-y-0 right-3 flex items-center pointer-events-none">
                                <svg class="w-4 h-4 text-gray-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                                  <path fill-rule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clip-rule="evenodd" />
                                </svg>
                              </div>
                            </div>
                      
                            <!-- Pay Now Button -->
                            <!-- <button type="submit" class="w-full bg-black text-white p-3 rounded mt-6 hover:bg-gray-800">
                              Pay Now
                            </button> -->
                          </form>
                    </div>
                    
                                    <!-- Order Summary -->

                    <div class="p-6 border rounded-lg shadow bg-gray-50">
                        <h3 class="text-lg font-medium mb-4 text-gray-800">Order Summary</h3>
                        <div class="space-y-2">
                            <div class="flex justify-between text-gray-700">
                                <span>Total Price</span>
                                <span id="totalPrice">
                                  <%=totalPrice%>
                                </span>
                              </div>
                              <div class="flex justify-between text-gray-700">
                                <span>Discount</span>
                                <span id="discount">
                                  <%=totalDiscount%>
                                </span>
                              </div>
                              <div class="flex justify-between text-gray-700">
                                <span>Final Price</span>
                                <span id="finalPrice">
                                  <%=grandTotal%>
                                </span>
                              </div>
                              <div class="flex justify-between text-gray-700">
                                <span>Shipping</span>
                                <span>Free</span>
                              </div>
                              <hr class="my-2 border-gray-300">
                              <div class="flex justify-between text-gray-800 font-semibold text-lg">
                                <span>Grand Total</span>
                                <span id="grandTotal">
                                  <%=grandTotal%>
                                </span>
                              </div>
                        </div>
                       
                        <button
                            class="w-full mt-4 bg-black text-white py-3 rounded text-center font-bold text-sm hover:bg-gray-800"
                            onclick="placeOrder()">
                            CONTINUE
                        </button>
                    </div>
                </section>


            </div>
        </main>

        <!-- Footer -->
        <%- include('../partials/user-footer') %>
            <!--Add Address Modal -->
            <div id="addAddressmodal"
                class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
                <div class="bg-white shadow rounded-md p-6 w-full max-w-lg">
                    <!-- Modal Header -->
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Add New Address</h2>
                        <button id="closeAddAddressModalButton"
                            class="text-gray-500 hover:text-gray-800">&times;</button>
                    </div>

                    <!-- Form Content -->
                    <form id="addAddressForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label for="name" class="block text-sm font-medium">Name</label>
                            <input type="text" id="name" class="w-full p-2 border rounded"
                                placeholder="Enter your full name" required minlength="3" maxlength="50">

                        </div>
                        <div>
                            <label for="house" class="block text-sm font-medium">House Name</label>
                            <input type="text" id="house" class="w-full p-2 border rounded"
                                placeholder="Enter house name or number" required minlength="3" maxlength="100">
                        </div>
                        <div>
                            <label for="street" class="block text-sm font-medium">Locality/Street</label>
                            <input type="text" id="street" class="w-full p-2 border rounded"
                                placeholder="Enter street name or locality" required minlength="3" maxlength="100">
                        </div>
                        <div>
                            <label for="city" class="block text-sm font-medium">Town/City</label>
                            <input type="text" id="city" class="w-full p-2 border rounded"
                                placeholder="Enter town or city" required minlength="3" maxlength="50">
                        </div>
                        <div>
                            <label for="state" class="block text-sm font-medium">State</label>
                            <input type="text" id="state" class="w-full p-2 border rounded" placeholder="Enter state"
                                required minlength="3" maxlength="50">
                        </div>
                        <div>
                            <label for="country" class="block text-sm font-medium">Country</label>
                            <input type="text" id="country" class="w-full p-2 border rounded"
                                placeholder="Enter country" required minlength="2" maxlength="50">
                        </div>
                        <div>
                            <label for="mobile" class="block text-sm font-medium">Mobile Number</label>
                            <input type="text" id="mobile" class="w-full p-2 border rounded"
                                placeholder="Enter 10-digit mobile number" required pattern="[0-9]{10}">
                        </div>
                        <div>
                            <label for="pincode" class="block text-sm font-medium">Pincode</label>
                            <input type="text" id="pincode" class="w-full p-2 border rounded"
                                placeholder="Enter 6-digit pincode" required pattern="[0-9]{6}">
                        </div>
                        <button class="w-full md:col-span-2 bg-black text-white py-2 rounded">Save</button>
                    </form>
                </div>
            </div>


            <!--Edit Address Modal -->
            <div id="editAddressModal"
                class="fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
                <div class="bg-white shadow rounded-md p-6 w-full max-w-lg">
                    <!-- Modal Header -->
                    <div class="flex justify-between items-center mb-4">
                        <h2 class="text-xl font-bold">Edit Address</h2>
                        <button id="closeeditAddressModalButton" class="text-gray-500 hover:text-gray-800"
                            onclick="closeEditModal()">&times;</button>
                    </div>

                    <!-- Form Content -->
                    <form id="editAddressForm" class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <input type="hidden" id="editAddressId" />
                        <div>
                            <label for="edit-name" class="block text-sm font-medium">Name</label>
                            <input type="text" id="edit-name" class="w-full p-2 border rounded"
                                placeholder="Enter your full name" required minlength="3" maxlength="50">

                        </div>
                        <div>
                            <label for="edit-house" class="block text-sm font-medium">House Name</label>
                            <input type="text" id="edit-house" class="w-full p-2 border rounded"
                                placeholder="Enter house name or number" required minlength="3" maxlength="100">
                        </div>
                        <div>
                            <label for="edit-street" class="block text-sm font-medium">Locality/Street</label>
                            <input type="text" id="edit-street" class="w-full p-2 border rounded"
                                placeholder="Enter street name or locality" required minlength="3" maxlength="100">
                        </div>
                        <div>
                            <label for="edit-city" class="block text-sm font-medium">Town/City</label>
                            <input type="text" id="edit-city" class="w-full p-2 border rounded"
                                placeholder="Enter town or city" required minlength="3" maxlength="50">
                        </div>
                        <div>
                            <label for="edit-state" class="block text-sm font-medium">State</label>
                            <input type="text" id="edit-state" class="w-full p-2 border rounded"
                                placeholder="Enter state" required minlength="3" maxlength="50">
                        </div>
                        <div>
                            <label for="edit-country" class="block text-sm font-medium">Country</label>
                            <input type="text" id="edit-country" class="w-full p-2 border rounded"
                                placeholder="Enter country" required minlength="2" maxlength="50">
                        </div>
                        <div>
                            <label for="edit-mobile" class="block text-sm font-medium">Mobile Number</label>
                            <input type="text" id="edit-mobile" class="w-full p-2 border rounded"
                                placeholder="Enter 10-digit mobile number" required pattern="[0-9]{10}">
                        </div>
                        <div>
                            <label for="edit-pincode" class="block text-sm font-medium">Pincode</label>
                            <input type="text" id="edit-pincode" class="w-full p-2 border rounded"
                                placeholder="Enter 6-digit pincode" required pattern="[0-9]{6}">
                        </div>
                        <button class="w-full md:col-span-2 bg-black text-white py-2 rounded">Save</button>
                    </form>
                </div>
            </div>



</body>

</html>
<script>

    const addAddressmodal = document.getElementById("addAddressmodal");
    const openAddAddressModalButton = document.getElementById("openAddAddressModalButton");
    const closeAddAddressModalButton = document.getElementById("closeAddAddressModalButton");

    // Open modal
    openAddAddressModalButton.addEventListener("click", () => {
      addAddressmodal.classList.remove("hidden");
    });

    // Close modal
    closeAddAddressModalButton.addEventListener("click", () => {
      addAddressmodal.classList.add("hidden");
    });



     // Form validation and submission handling For Adding Address
      document
        .getElementById("addAddressForm")
        .addEventListener("submit", async function (e) {
          e.preventDefault();

          // Prepare form data
          const formData = {
            Name: document.getElementById("name").value.trim(),
            HouseName: document.getElementById("house").value.trim(),
            LocalityStreet: document
              .getElementById("street")
              .value.trim(),
            TownCity: document.getElementById("city").value.trim(),
            MobileNumber: document.getElementById("mobile").value.trim(),
            state: document.getElementById("state").value.trim(),
            country: document.getElementById("country").value.trim(),
            pincode: document.getElementById("pincode").value.trim(),
          };
          try {
            const response = await axios.post("/address/add", formData);

            if (response.status === 201) {
              Swal.fire({
                title: "Success!",
                text: "Address added successfully",
                icon: "success",
                confirmButtonText: "OK",
              }).then(async (result) => {
                // Hide the form
                document
                  .getElementById("addAddressmodal")
                  .classList.add("hidden");

                window.location.reload();
              });
            }
          } catch (error) {
            console.error("Error adding address:", error);
            Swal.fire({
              title: "Error",
              text: error || "Failed to add address. Please try again later.",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        });


     //---------------Edit Address

     async function openEditModal(addressId) {
      try {
        const response = await axios.get(`/address/edit/${addressId}`);
        const data = response.data;
            // Populate modal fields
            document.getElementById("editAddressId").value = addressId;
            document.getElementById("edit-name").value = data.Name;
            (document.getElementById("edit-house").value = data.HouseName),
              (document.getElementById("edit-street").value =
              data.LocalityStreet),
              (document.getElementById("edit-city").value = data.TownCity),
              (document.getElementById("edit-mobile").value =
              data.MobileNumber),
              (document.getElementById("edit-state").value = data.state),
              (document.getElementById("edit-country").value = data.country),
              (document.getElementById("edit-pincode").value = data.pincode),
              // Show the modal
              document
                .getElementById("editAddressModal")
                .classList.remove("hidden");
  
        } catch (error) {
            console.error("Error adding address:", error);
            Swal.fire({
              title: "Error",
              text: "Failed to bring Edit address form.",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
          
      }
/////close edit modal////
      function closeEditModal() {
        document.getElementById("editAddressModal").classList.add("hidden");
      }
////////////edit address form handling///
      document
        .getElementById("editAddressForm")
        .addEventListener("submit",async function (e) {
          e.preventDefault();

          const addressId = document.getElementById("editAddressId").value;
          const updatedData = {
            //Name: document.getElementById('editName').value,
            Name: document.getElementById("edit-name").value.trim(),
            HouseName: document.getElementById("edit-house").value.trim(),
            LocalityStreet: document
              .getElementById("edit-street")
              .value.trim(),
            TownCity: document.getElementById("edit-city").value.trim(),
            MobileNumber: document
              .getElementById("edit-mobile")
              .value.trim(),
            state: document.getElementById("edit-state").value.trim(),
            country: document.getElementById("edit-country").value.trim(),
            pincode: document.getElementById("edit-pincode").value.trim(),
            // Include other fields here
          };
          try {
            const response = await axios.post(`/address/edit/${addressId}`, updatedData);
          
            if (response.status === 200) {
              Swal.fire({
                title: "Success!",
                text: response.message,
                icon: "success",
                confirmButtonText: "OK",
              }).then(async (result) => {
                // Hide the form
                closeEditModal();

                window.location.reload();
              });
            }
          } catch (error) {
            console.error("Error adding address:", error);
            Swal.fire({
              title: "Error",
              text:error.message || "Failed to edit address. Please try again later.",
              icon: "error",
              confirmButtonText: "OK",
            });
          }
        });

//////////DELETION HANDLING///////////////////////////////////////////////////////////////////////////////////////////////////
        document.addEventListener("DOMContentLoaded", () => {
        const deleteButtons = document.querySelectorAll(".deleteAddress");

        deleteButtons.forEach((button) => {
          button.addEventListener("click", (e) => {
            e.preventDefault();
            const addressId = button.getAttribute("data-id");

            Swal.fire({
              title: "Are you sure?",
              text: "You won't be able to revert this!",
              icon: "warning",
              showCancelButton: true,
              confirmButtonColor: "#3085d6",
              cancelButtonColor: "#d33",
              confirmButtonText: "Yes, delete it!",
            }).then((result) => {
              if (result.isConfirmed) {
    axios.delete(`/address/delete/${addressId}`)                
          .then((response)=>{
              if (response.status === 200) {
              Swal.fire({
                title: "Success!",
                text: response.data.message,
                icon: "success",
                confirmButtonText: "OK",
              }).then(() => {
  window.location.reload();
});
            }              
            }).catch((error)=>{
              console.error("Error adding address:", error);
            Swal.fire({
              title: "Error",
              text: error.message || "Failed to delete address.try again later",
              icon: "error",
              confirmButtonText: "OK",
            });
            }
          )
          } })
          });
        });
      });
    
///////Place Order////////////////////////////////////////////////////////////////////
async function placeOrder() {
        const selectedAddressId = document.querySelector('input[name="selectedAddress"]:checked');
        const paymentMethod = document.querySelector('input[name="paymentMethod"]:checked');

        if (!selectedAddressId) {
            Swal.fire('Error', 'Please select a delivery address.', 'error');
            return;
        }
        if (!paymentMethod) {
            Swal.fire('Error', 'Please select a payment method.', 'error');
            return;
        }

        const addressId = selectedAddressId.value;
        const method = paymentMethod.value;
        
        try {
            const response = await fetch('/place-order', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ addressId, paymentMethod: method })
            });

            const result = await response.json();

            if (response.ok) {
                if (method === 'Razorpay') {
                    handleRazorpayPayment(result.order);
                } else if (method === 'Cash On Delivery' || method === 'Wallet') {
                    window.location.href = `order/confirmation/${result.orderId}`;
                }
            } else {
                if (result.message === "Cash On Delivery is not available for orders above Rs 1000") {
                    Swal.fire('Error', result.message, 'error');
                } else {
                    Swal.fire('Error', result.message || 'An error occurred while placing your order.', 'error');
                }
            }
        } catch (error) {
            console.error("Error placing order:", error);
            Swal.fire('Error', 'An error occurred while placing your order. Please try again.', 'error');
        }
    }

    
function handleRazorpayPayment(order) {
        const options = {
            key: '<%= process.env.RAZORPAY_KEY_ID %>',
            amount: order.amount,
            currency: order.currency,
            name: 'Carry mart',
            description: 'Purchase',
            order_id: order.id,
            handler: function (response) {
                verifyPayment(response, order); 
            },
            prefill: {
                name: '<%= user.name %> ,
                email: '<%= user.email %>',
                contact: '<%= user.phone %>'
            },
            theme: {
                color: '#F97316'
            },
            modal: {
                ondismiss: function() {
                    handlePaymentFailure(order.id);
                }
            }
        };
        const rzp = new Razorpay(options);
        rzp.open();
    }

    async function verifyPayment(paymentResponse, order) {
        try {
            const response = await fetch('/order/verify-payment', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    orderId: order.id,
                    paymentId: paymentResponse.razorpay_payment_id,
                    signature: paymentResponse.razorpay_signature
                })
            });

            const result = await response.json();

            if (result.success) {
                Swal.fire('Success', 'Payment successful!', 'success').then(() => {
                    window.location.href = `order/confirmation/${result.orderId}`;
                });
            } else {
                await handlePaymentFailure(order.id);
            }
        } catch (error) {
            console.error("Error verifying payment:", error);
            await handlePaymentFailure(order.id);
        }
    }

    async function handlePaymentFailure(orderId) {
        try {
            const response = await fetch('/order/payment-failed', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ orderId })
            });

            const result = await response.json();

            if (response.ok) {
                Swal.fire({
                    title: 'Payment Failed',
                    text: 'Your order has been saved. You can complete the payment later from your order details page.',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'View Order',
                    cancelButtonText: 'Close'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = `/orders`;
                    }
                    else {
                        window.location.href = `/home`;
                    }
                });
            } else {
                Swal.fire('Error', result.message || 'An error occurred while processing your payment.', 'error');
            }
        } catch (error) {
            console.error("Error handling payment failure:", error);
            Swal.fire('Error', 'An error occurred while processing your payment. Please check your order status.', 'error');
        }
    }

</script>