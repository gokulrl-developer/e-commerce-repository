<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Profile</title>
  <script src="https://kit.fontawesome.com/a076d05399.js" crossorigin="anonymous"></script>
  <link rel="stylesheet" href="/style.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>


</head>
<body class="bg-blue-200">

  <!-- Header -->
  <%- include('../partials/user-header') %>

  <!-- Main Content -->
  <main class="container px-4 mb-8 mt-8 gap-3 px-4 flex flex-col md:flex-row">
   
  <!-- Sidebar -->
  <%- include('../partials/user-profile-sidebar') %>


    <!-- Personal Information Form -->
    <section class="w-full md:w-4/5 bg-indigo-500 text-lg shadow-lg mx-6 rounded-lg p-6">
      <h2 class="text-xl font-bold mb-4">Personal Information</h2>
      <form onsubmit="updateProfile(event)" class="space-y-4">
        <div>
          <label for="full-name" class="block font-medium text-black ">Firstname</label>
          <input type="text" id="full-name" name="full-name" value="<%= user.name %>" class="mt-1 block w-1/2 shadow-sm p-1">
          <span id="full-name-error" class="text-red-500 text-sm"></span>

        </div>
        <div>
          <label for="email" class="block font-medium text-black">Email</label>
          <input type="email" id="email" name="email" value="<%= user.email %>" class="mt-1 block w-1/2 shadow-sm p-1 ">
          <span id="email-error" class="text-red-500 text-sm"></span>
        </div>
        <div>
          <label for="mobile" class="block font-medium text-black">Mobile</label>
          <input type="tel" id="mobile" name="mobile" value="<%= user.mobile %>" class="mt-1 block w-1/2 shadow-sm p-1 ">
          <span id="mobile-error" class="text-red-500 text-sm"></span>
        </div>
        <button type="submit" class="bg-black text-white font-bold py-2 px-4 rounded hover:bg-gray-800">Update</button>
      </form>
    </section>
  </main>

  <!-- Footer Section -->
  <%- include('../partials/user-footer') %>

</body>
</html>
<script>
  // Function to validate Mobile Number (only numbers, exactly 10 digits)
  const validateMobile = (mobile) => {
    const mobileRegex = /^[0-9]{10}$/; // Ensure it's exactly 10 digits
    const mobileError = document.getElementById("mobile-error");

    if (!mobile) {
      mobileError.textContent = "Mobile number cannot be blank.";
      return false;
    }
    if (!mobileRegex.test(mobile)) {
      mobileError.textContent = "Mobile number must be exactly 10 digits.";
      return false;
    }
    // Check for repeated digits (e.g., 0000000000, 5555555555)
    if (/^(\d)\1{9}$/.test(mobile)) {
      mobileError.textContent =
        "Mobile number cannot contain the same digit repeated 10 times.";
      return false;
    }

    mobileError.textContent = ""; // Clear error message when valid
    return true;
  };

  // Function to validate Full Name (only alphabets and spaces, no blanks)
  const validateFullName = (fullName) => {
    const fullNameRegex = /^[A-Za-z\s]+$/;
    const fullNameError = document.getElementById("full-name-error");

    if (!fullName) {
      fullNameError.textContent = "Full name cannot be blank.";
      return false;
    }
    if (!fullNameRegex.test(fullName)) {
      fullNameError.textContent = "Full name must only contain alphabets.";
      return false;
    }

    fullNameError.textContent = ""; // Clear error message when valid
    return true;
  };
  
  // Function to validate email
 /*  function validateEmail() {
    const emailError = document.getElementById("email-error");
  
    const startsWithNumber = /^[0-9]/.test(email);
  
    if (startsWithNumber) {
      emailError.textContent = "Email ID cannot start with a number.";
      return false;
    }
  
    const regex = /^[\w-\.]+@([\w-]+\.)+[\w-]{2,4}$/;
  
    if (!regex.test(email)) {
      emailError.textContent = "Enter a valid email address.";
      return false;
    } else {
      emailError.textContent = "";
      return true;
    }
  }
  */
 
  // Add event listeners to input fields for live validation
  document.getElementById("mobile").addEventListener("input", (e) => {
    const mobile = e.target.value;
    validateMobile(mobile);
  });

  document.getElementById("full-name").addEventListener("input", (e) => {
    const fullName = e.target.value;
    validateFullName(fullName);
  });

  // Update the submit button based on validation status
  const updateProfile = async (e) => {
    e.preventDefault(); // Prevent default form submission

    const fullName = document.getElementById("full-name").value.trim();
    const mobile = document.getElementById("mobile").value.trim();

    // Perform validation
    const isMobileValid = validateMobile(mobile);
    const isFullNameValid = validateFullName(fullName);

    if (!isMobileValid || !isFullNameValid) {
      return; // Stop execution if validation fails
    }

    try {
      // Send data to the server
      const response = await axios.post(
        "/profile",
        { fullName, mobile },
        { headers: { "Content-Type": "application/json" } }
      );
 if(response.status===200){
      // Display success message using SweetAlert
      Swal.fire({
        title: "Success!",
        text: response.data.message,
        icon: "success",
        confirmButtonText: "OK",
      });}
    } catch (error) {
      console.error(
        "Error updating profile:",
        error.response?.data || error.message
      );
      // Display error message using SweetAlert
      Swal.fire({
        title: "Error!",
        text:
          error.response?.data?.error ||
          "Failed to update profile. Please try again later.",
        icon: "error",
        confirmButtonText: "Retry",
      });
    }
  };
</script>