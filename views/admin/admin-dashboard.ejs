<!DOCTYPE html>
<html lang="en">

<head>
  <!-- Required meta tags -->
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Dashboard</title>
  <link rel="stylesheet" href="/style.css">
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
</head>

<body class="bg-gray-900 text-white">
  <!-- Header -->
  <%-include('../partials/admin-header')%>

    <!-- Main Content -->
    <div class="flex">
      <!-- Sidebar -->
      <%-include('../partials/admin-sidebar')%>


        <!-- Main Content -->
        <main class="flex-grow p-6 md:w-4/5">
          <div class="flex justify-between items-center mb-8">
            <h1 class="text-2xl font-bold text-green-500">Sales Summary</h1>
            <div class="flex space-x-4">
              <select id="dateRange" class="bg-[#111] text-white px-4 py-2 rounded-md">
                <option value="day">Today</option>
                <option value="week">This Week</option>
                <option value="month">This Month</option>
                <option value="year">This Year</option>
                <option value="custom">Custom Range</option>
              </select>
              <input type="date" id="startDate" class="bg-[#111] text-white px-4 py-2 rounded-md hidden">
              <input type="date" id="endDate" class="bg-[#111] text-white px-4 py-2 rounded-md hidden">
              <button id="generateSummary"
                class="bg-indigo-500 hover:bg-indigo-600 text-sm text-black font-semibold px-4 py-1 ">
                Apply
              </button>
            </div>
          </div>

          <!-- Summary Cards -->
          <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-4 mb-8">
            <div class="bg-[#111] p-4 rounded-lg">
              <h3 class="text-lg font-bold text-green-500">Total Sales</h3>
              <p class="text-2xl font-bold" id="totalSales"><span class="text-red-500 font-bold">₹</span>
                <%= summary.totalSales.toFixed(2) %>
              </p>
            </div>
            <div class="bg-[#111] p-4 rounded-lg">
              <h3 class="text-lg font-bold text-green-500">Total Orders</h3>
              <p class="text-2xl font-bold" id="totalOrders">
                <%= summary.totalOrders %>
              </p>
            </div>
            <div class="bg-[#111] p-4 rounded-lg">
              <h3 class="text-lg font-bold text-green-500">Total Discount</h3>
              <p class="text-2xl font-bold" id="totalDiscount">₹<%= summary.totalDiscount.toFixed(2) %>
              </p>
            </div>
            <div class="bg-[#111] p-4 rounded-lg">
              <h3 class="text-lg font-bold text-green-500">Total Coupon</h3>
              <p class="text-2xl font-bold" id="totalCouponDiscount">₹<%= summary.totalCouponDiscount.toFixed(2) %>
              </p>
            </div>
            <div class="bg-[#111] p-4 rounded-lg">
              <h3 class="text-lg font-bols text-green-500">Net Amount</h3>
              <p class="text-2xl font-bold" id="netAmount">₹<%= summary.netAmount.toFixed(2) %>
              </p>
            </div>
          </div>

          <!-- Chart -->
          <div class="m-5">
            <select id="chart-range" class="bg-[#111] text-white px-4 py-2 text-sm rounded-md">
              <option value="Year">Yearly</option>
              <option value="Month">Monthly</option>
              <option value="Day">Daily</option>
              <option value="Hour">Hoursly</option>
            </select>
            <button id="generate-chart" onclick="generateChart()"
                class="bg-indigo-500 hover:bg-indigo-600 text-black text-sm font-semibold px-4 py-1">
                Apply
            </button>
            <div id="sales-chart">

            </div>
          </div>
         
          <!-- Top Selling Items -->
           <div class="m-5">
            <div class="flex flex-row mt-4">
                 <h3>Select Top Selling Items : </h3>
            <select id="select-item" class="bg-[#111] text-white text-sm px-4 py-2 rounded-md"
            onchange="getBestSellingItems()">
              <option value="Product">Products</option>
              <option value="Brand">Brands</option>
              <option value="Category">Categories</option>
            </select>
            </div>
            <div id="top-sold-container" class="w-full h-auto mt-4">
            
           </div>

        </main>

    </div>

    <!-- Footer -->
    <%-include('../partials/admin-footer')%>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/luxon@2.5.1/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon"></script>
    

  </body>

</html>
<script>
  // Utility Functions
  const qs = (selector) => document.querySelector(selector);
  const qsa = (selector) => document.querySelectorAll(selector);


  // Generate Report
  async function generateSummary() {
    const dateRange = qs("#dateRange").value;
    let startDate = qs("#startDate").value;
    let endDate = qs("#endDate").value;

    let url = `/admin/dashboard/data?range=${dateRange}`;
    if (dateRange === 'custom') {
      url += `&startDate=${startDate}&endDate=${endDate}`;
    }

    try {
      const response = await fetch(url);
      const data = await response.json();
      if (response.ok) {
        qs("#totalSales").textContent = `₹${data.summary.totalSales.toFixed(2)}`;
        qs("#totalOrders").textContent = data.summary.totalOrders;
        qs("#totalDiscount").textContent = `₹${data.summary.totalDiscount.toFixed(2)}`;
        qs("#totalCouponDiscount").textContent = `₹${data.summary.totalCouponDiscount.toFixed(2)}`;
        qs("#netAmount").textContent = `₹${data.summary.netAmount.toFixed(2)}`;
        getBestSellingItems();
        generateChart();
         } else {
        Swal.fire('Error', data.message || 'Failed to generate report', 'error');
      }
    } catch (error) {
      console.error("Error generating report:", error);
      Swal.fire('Error', error.message || 'An error occurred while generating the report', 'error');
    }
  }


  //Get Chart Data
  Chart.defaults.set('scales.x.time.adapter', luxon.DateTime);

  async function generateChart() {
    const dateRange = qs("#dateRange").value;
    let startDate = qs("#startDate").value;
    let endDate = qs("#endDate").value;
    let chartRange = qs('#chart-range').value;
    let url = `/admin/dashboard/chartData?range=${dateRange}&chartRange=${chartRange}`;
    
    if (dateRange === 'custom') {
        url += `&startDate=${startDate}&endDate=${endDate}`;
    }
    
    try {
        const response = await fetch(url);
        if (response.ok) {
            const data = await response.json();
            const chartContainer = document.getElementById('sales-chart');
            chartContainer.innerHTML = '';
            
            if (data.chartData.length > 0) {
                chartContainer.innerHTML = '<canvas id="chart-canvas"></canvas>';
                const ctx = qs("#chart-canvas");
                if (window.chartInstance) {
                    window.chartInstance.destroy();
                }

                let timeUnit, displayFormats;

                if (chartRange === 'Month') {
                    timeUnit = 'month';
                    displayFormats = { month: 'MMM yyyy' };
                } else if (chartRange === 'Hour') {
                    timeUnit = 'hour';
                    displayFormats = { hour: 'H:mm D' };
                } else if (chartRange === 'Year') {
                    timeUnit = 'year';
                    displayFormats = { year: 'yyyy' };
                } else {
                    // Default to day view if not specified
                    timeUnit = 'day';
                    displayFormats = { day: 'MMM D' };
                }

                var chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: data.chartData[0].label,
                        datasets: [{
                            label: 'Number of Orders',
                            data: data.chartData[0].orderCount,
                            borderWidth: 1,
                        }]
                    },
                    options: {
                        scales: {
                            x: {
                                type: 'time',
                                time: {
                                    unit: timeUnit,
                                    displayFormats: displayFormats
                                },
                                ticks: {
                                    source: 'auto',
                                }
                            },
                            y: {
                                beginAtZero: true
                            }
                        }
                    }
                });
            }
        } else {
            Swal.fire('Error', data.message || 'Failed to generate report', 'error');
        }
    } catch (error) {
        Swal.fire('Error', error.message || 'An error occurred while generating the report', 'error');
    }
}

//Get Best selling Items
async function getBestSellingItems(){
  try{
    const dateRange = qs("#dateRange").value;
    let startDate = qs("#startDate").value;
    let endDate = qs("#endDate").value;
    const selectedItem =qs("#select-item").value;
    let url = `/admin/dashboard/topSold?range=${dateRange}&item=${selectedItem}`;
    if (dateRange === 'custom') {
      url += `&startDate=${startDate}&endDate=${endDate}`;
    }
  const response=await fetch(url);
if(response.ok){
  const data= await response.json();
  const topSoldContainer=qs('#top-sold-container');
  if(data.topSoldData.length===0){
    topSoldContainer.innerHTML=`<div class="mt-15 flex justify-center items-center"><h1>No Items to Show</h1></div>`;
  }else{
  let html='';
  html+= `<table class="border">
              <thead>
               <tr class="border-b">
                <th class="px-6 py-3 border-r">No:</th>
                ${selectedItem==='Product'?'<th class="px-6 py-3 border-r" >Name and Brand</th>':'<th class="px-6 py-3 border-r">Name</th>'}
                <th class="px-6 py-3">Total Sales</th>
               </tr>
              </thead>
              <tbody>`
  data.topSoldData.forEach((x,index)=>
html+=` <tr >
         <td class="px-6 py-3 border-r">${index+1}</td>
        <td class="px-6 py-3 border-r">${selectedItem==='Product'? x.item.itemName + '|' + x.item.itemBrand : x.item.itemName}</td>
        <td class="px-6 py-3 ">${x.orderCount}</td>
        </tr>`
          
  );
   html+=`</tbody>
         </table>`
  topSoldContainer.innerHTML=html;
          };
  }else{
    const result=await response.json();
    Swal.fire({title:"Error",icon:"error",text:result.message || "An error occured while fetching top Sold Items"})
  }
}catch(error){
  Swal.fire({title:"Error",text:error.message || "An error occured while fetching top sold items",icon:"error"})
}
}
 

// Event Listeners
  qs("#dateRange").addEventListener("change", function () {
    const customDateInputs = qsa("#startDate, #endDate");
    customDateInputs.forEach(input => {
      input.classList.toggle("hidden", this.value !== "custom");
    });
  });

  qs("#generateSummary").addEventListener("click", generateSummary);

  // Initialize summary on page load
  document.addEventListener("DOMContentLoaded", generateSummary);
  document.addEventListener("DOMContentLoaded",generateChart)
  document.addEventListener("DOMContentLoaded",getBestSellingItems)
</script>