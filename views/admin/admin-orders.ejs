<!doctype html>
<html lang="en">

<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Orders</title>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  <link rel="stylesheet" href="/style.css">
</head>

<body class="bg-gray-900 text-white">

  <!-- Header section -->
  <%-include('../partials/admin-header')%>
    <div class="flex">
      <!-- Sidebar -->
      <%-include('../partials/admin-sidebar')%>

        <!-- Main Content -->
        <main class="flex-grow p-6 md:w-4/5">
          <div class="flex justify-between items-center mb-4">

            <div class="mb-4">
              <input type="text" id="search" name="search" class="form-input bg-indigo-500 px-4 py-2 w-[90%]"
                placeholder="Search an item" oninput="applySearch()">
              <button onclick="applySearch()">Search</button>
            </div>

            <h4 class="text-xl font-semibold">Orders</h4>

          </div>

          <div class="bg-gray-700 text-white rounded p-4">
            <table class="w-full border-collapse table-fixed">
              <thead>
                <tr class="text-left border-b">
                  <th class="p-2 w-1/9">Sl. No</th>
                  <th class="p-2 w-1/9">Order Id</th>
                  <th class="p-2 w-1/9"> Order<br>status</th>
                  <th class="p-2 w-2/9">Customer<br>Details</th>
                  <th class="p-2 w-2/9">Payment<br>Details</th>
                  <th class="p-2 w-2/9">Actions</th>
                </tr>
              </thead>
              <tbody id="order-table-body">
                <% if(orders && orders.length>0){%>
                  <% orders.forEach((order, index)=> { %>
                    <tr class="hover:bg-gray-600">
                      <td class="p-2 break-words">
                        <%= index + 1 %>
                      </td>
                      <td class="p-2 break-words">
                        <%= `${order._id.toString().slice(-6)}` %>
                      </td>
                      <td class="p-2 break-words">
                        <%= order.orderStatus %>
                      </td>
                      <td class="p-2 break-words">
                        Name : <%= order.user.customerName %><br>
                          Email : <%= order.user.customerEmail %>
                      </td>
                      <td class="p-2 break-words">
                        Payment status : <%= order.payment.paymentStatus %><br>
                          Total price : <%= order.payment.totalFinalPrice %><br>
                            Payment method : <%= order.payment.paymentMethod %><br>
                      </td>
                      <td class="p-2 break-words">
                        <button class="bg-green-500 text-white py-1 px-2 rounded hover:bg-green-600"
                          onclick="viewDetailsModal('<%= order._id %>')">
                          View
                        </button>
                        <% if (order.orderItems.some(item => item.status === 'Return Requested')) { %>
                          <button onclick="viewReturnRequests('<%= order._id %>')"
                            class="bg-green-500 text-white py-1 px-2 rounded hover:bg-green-600">
                            Return
                          </button>
                        <% } %>
                      </td>
                    </tr>
                    <% }) %>
                      <%}%>
              </tbody>
            </table>
          </div>
        </main>
    </div>

    <!-- Pagination -->
    <div class="mt-4 flex justify-center">
      <nav class="inline-flex" id="pagination-container">
        <% if (currentPage> 1) { %>
          <a href="/admin/orders?page=<%= currentPage - 1 %>"
            class="bg-[#222] text-white px-3 py-1 mx-1 rounded-md hover:bg-orange-500">Previous</a>
          <% } %>
            <% for (let i=1; i <=totalPages; i++) { %>
              <a href="/admin/orders?page=<%= i %>"
                class="<%= currentPage === i ? 'bg-orange-500' : 'bg-[#222]' %> text-white px-3 py-1 mx-1 rounded-md hover:bg-orange-500">
                <%= i %>
              </a>
              <% } %>
                <% if (currentPage < totalPages) { %>
                  <a href="/admin/orders?page=<%= currentPage + 1 %>"
                    class="bg-[#222] text-white px-3 py-1 mx-1 rounded-md hover:bg-orange-500">Next</a>
                  <% } %>
      </nav>
    </div>

    <!--  Details Modal -->
    <div id="detailsModal" class="hidden fixed z-10 inset-0 flex items-center justify-center bg-black/50  ">
      <div class="bg-black p-6 rounded shadow-lg max-w-4xl w-full relative overflow-y-auto max-h-[90vh]">
        <button
          class="absolute top-2 right-2 text-gray-600 hover:text-gray-900 text-2xl font-bold w-8 h-8 flex items-center justify-center"
          onclick="closeDetailsModal()">
          &times;
        </button>
        <h2 class="text-xl font-bold mb-4 text-center">Order Details</h2>
        <hr>
        <!-- Order Information -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2 text-gold text-center">Order Information</h3>
          <p><strong>Order ID:</strong> <span id="orderId"></span><br>
            <strong>Order Status:</strong> <span id="orderStatus"></span><br>
            <strong>Order Date:</strong> <span id="orderDate"></span><br>
          </p>
          <div id="edit-status"></div>
        </div>
<hr>
        <!-- Customer Details -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2 text-gold text-center">Customer Details</h3>
          <p><strong>Name:</strong> <span id="customerName"></span><br>
            <strong>Email:</strong> <span id="customerEmail"></span><br>
          </p>
        </div>
<hr>
        <!-- Shipping Address -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2 text-gold text-center">Shipping Address</h3>
          <p id="shippingAddress"></p>
        </div>
<hr>
        <!-- Product Details -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2 text-black text-center">Products</h3>
          <ul id="productList" class="space-y-4"></ul>
        </div>
<hr>
        <!-- Payment Details -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2  text-center">Payment Details</h3>
          <p><strong>Payment Method:</strong> <span id="paymentMethod"></span><br>
            <strong>Payment Status:</strong> <span id="paymentStatus"></span><br>
            <strong>Total Amount :</strong> â‚¹<span id="total"></span><br>
          </p>
        </div>
<hr>
        <!-- Cancel Order Button -->
        <div id="cancelOrderContainer" class="mt-6"></div>
      </div>
    </div>

    <!--  Return requests modal -->
    <div id="return-details" class="hidden fixed z-10 inset-0 flex items-center justify-center bg-black/50  ">
      <div class="bg-black p-6 rounded shadow-lg max-w-4xl w-full relative overflow-y-auto h-auto ">
        <button
          class="absolute top-2 right-2 text-gray-600 hover:text-gray-900 text-2xl font-bold w-8 h-8 flex items-center justify-center"
          onclick="closeReturnDetailsModal()">
          &times;
        </button>
       <!-- Product Details -->
        <div class="mb-6">
          <h3 class="font-bold text-lg mb-2 text-black">Products</h3>
          <div id="return-request-list" class="space-y-4"></div>
        </div>
      </div>
    </div>


    </div>

    <!-- Footer Section -->
    <%-include('../partials/admin-footer')%>

</body>

</html>
<script>
  async function viewDetailsModal(orderId) {
    try {
      const response = await fetch(`/admin/order/details/${orderId}`)
      const data = await response.json();
      if (response.ok) {
        console.log(data);
        // Populate order information
        document.getElementById('orderId').textContent = `#${data.order._id.toString().slice(-6)}`;
        document.getElementById('orderDate').textContent = data.formattedDate;
        document.getElementById('orderStatus').textContent = data.order.orderStatus;
        if (data.order.orderStatus === "Pending" || data.order.orderStatus === "Processing") {
          document.getElementById("edit-status").innerHTML = `
        <h2 class="text-lg font-bold mb-4 ">Edit Order Status</h2>
          <select class="border border-gray-300 rounded px-3 py-1 bg-red-500 hover:bg-red-800" id="edited-status">
            <option value="" selected disabled>Edit Status</option>
            <option value="Pending">Pending</option>
            <option value="Processing">Processing</option>
            <option value="Shipped">Shipped</option>
            <option value="Cancelled">Cancelled</option>
            <option value="Delivered">Delivered</option>
          </select>
          <button class="bg-green-500 text-white py-1 px-2 rounded hover:bg-green-600"
                        onclick="editStatus('${orderId}')">
                        Edit Status
                      </button>`
        } else {
          document.getElementById("edit-status").innerHTML = ""
        }
        // Populate customer details
        document.getElementById('customerName').textContent = data.order.user.customerName;
        document.getElementById('customerEmail').textContent = data.order.user.customerEmail;
        // Populate shipping address
        const address = data.order.user.shippingAddress;
        document.getElementById('shippingAddress').innerHTML =
          `${address.Name}, ${address.HouseName}, ${address.LocalityStreet}, ${address.TownCity}, ${address.state}, ${address.country},<br> Pin :  ${address.pincode},<br> Contact :  ${address.MobileNumber}`;

        // Populate product details
        const productList = document.getElementById('productList');
        productList.innerHTML = ''; // Clear previous data
        data.order.orderItems.forEach((item) => {
          const productElement = document.createElement('li');
          productElement.classList.add('flex', 'gap-4', 'border-b', 'border-gray-700', 'pb-4', 'last:border-b-0');


          productElement.innerHTML = `
                                <div>
                            <img src="${item.product.imageUrl[0]}" alt="${item.product.productName}" class="w-20 h-20 object-contain">
                            </div>
                              <div>
                                <h4 class="font-bold">${item.product.productName}</h4>
                                                    <p>Status: ${item.status}</p>

                                <p >Price: â‚¹${Number(item.price).toFixed(2)}</p>
                                <p >Quantity: ${item.quantity}</p>
                                <p >totalPrice: â‚¹${Number(item.price * item.quantity).toFixed(2)}</p>
                                <p >Final price: â‚¹${(item.price * item.quantity -
              item.quantity * item.price * item.discount / 100
            ).toFixed(2)}</p>

                            </div>
                        `;
          productList.appendChild(productElement);
        });
        // Populate payment details
        document.getElementById('paymentMethod').textContent = data.order.payment.paymentMethod;
        document.getElementById('paymentStatus').textContent = data.order.payment.paymentStatus;
        document.getElementById('total').textContent = Number(data.order.payment.grandTotal).toFixed(2);



        // Show modal
        document.getElementById('detailsModal').classList.remove('hidden');
      } else {
        Swal.fire('Error', data.message || 'Failed to fetch order details', 'error');
      }

    } catch (error) {
      console.error('Error fetching order details:', error);
      Swal.fire('Error',error.message || 'An error occurred while fetching order details', 'error');
    }
  }
  async function closeDetailsModal() {
    document.getElementById("detailsModal").classList.add("hidden");
  }
  async function editStatus(orderId) {
    try {
      const editedStatus = document.getElementById("edited-status").value;
      if (!editedStatus) {
        throw new Error("No status selected");
      }
      const response = await fetch(`/admin/order/edit/${orderId}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          editedStatus: editedStatus
        })
      });
      const data = await response.json();

      if (response.ok) {
        Swal.fire('Status Edited!', data.message, 'success').then(() => {
      location.reload();
    });
      } else {
        throw new Error(data.message || 'Failed to edit order status');
      }
    } catch (error) {
      console.error('Error cancelling order:', error);
      Swal.fire('Error!', error.message || 'An error occurred while editing the order status', 'error');
    }
  }

  function viewReturnRequests(orderId) {
      fetch(`/admin/order/details/${orderId}`)
      .then(response => {
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error( data.message || 'Failed to fetch return requests');
        });
      }
      return response.json();
    })
        
        .then(data => {
          const returnItems = data.order.orderItems.filter(item => item.status === 'Return Requested');
          const modalContent = document.getElementById('return-request-list');
          modalContent.innerHTML = `
            <h3 class="text-lg font-bold mb-2">Return Requests for Order #${data.order._id}</h3>
            <ul class="space-y-4">
              ${returnItems.map(item => `
              <li>
                <div>
                            <div>
                                <h4 class="font-bold">${item.product.productName}</h4>
                                                    <p>Status: ${item.status}</p>
                                <p >Quantity: ${item.quantity}</p>
                                                 <p><strong>Request Date:</strong> ${new Date(item.returnRequestDate).toLocaleString()}</p>
                            </div>
                            <div>
                  <p><strong>Return Reason:</strong> ${item.returnReason}</p>

                              </div>
                               <div >
                    <button onclick="handleReturnRequest('${data.order._id}', '${item._id}', 'approve')"
                      class="bg-green-600 hover:bg-green-700 text-black font-semibold px-3 py-1 rounded-md text-sm mr-2">
                      Approve
                    </button>
                    <button onclick="handleReturnRequest('${data.order._id}', '${item._id}', 'reject')"
                      class="bg-red-600 hover:bg-red-700 text-black font-semibold px-3 py-1 rounded-md text-sm">
                      Reject
                    </button>
                  </div>
                  </div>
                  </li>
                  `).join('')}
               </ul>       
          `;
          document.getElementById('return-details').classList.remove('hidden');
        })
        .catch(error => {
          console.error('Error:', error);
          Swal.fire('Error','Failed to fetch return requests', 'error');
        });
    }

    function closeReturnDetailsModal() {
      document.getElementById('return-details').classList.add('hidden');
    }

    
    function handleReturnRequest(orderId, itemId, action) {
  fetch('/admin/orders/return-request', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ orderId, itemId, action }),
  })
    .then(response => {
      if (!response.ok) {
        return response.json().then(data => {
          throw new Error( data.message || 'Failed to process return request on server side');
        });
      }
      return response.json();
    })
    .then(data => {
      Swal.fire('Success', data.message, 'success').then(() => {
        closeReturnDetailssModal();
        location.reload();
      });
    })
    .catch(error => {
      console.error('Error:', error);
      Swal.fire('Error', error.message || 'An error occurred while processing the return request', 'error');
    });
}

//Apply Filters
async function applySearch(url='/admin/orders?page=1&limit=9') {
    try {
      const search = document.getElementById('search').value.trim();
      url=url+`&search=${search}`
      const response = await fetch(url,{
        headers: {
          'Content-Type':'application/json',
          'X-Requested-With': 'XMLHttpRequest'
        }
      });
      if (response.ok) {
        const data = await response.json();
        if (!data.orders || data.orders.length === 0) {
          document.getElementById('order-table-body').innerHTML = `
         <p class="text-gray-400">You haven't placed any orders yet.</p>`
        } else {
          document.getElementById("order-table-body").innerHTML=
           data.orders.map((order,index) => (
          `<tr class="hover:bg-gray-600">
                      <td class="p-2 break-words">
                        ${index + 1 }
                      </td>
                      <td class="p-2 break-words">
                        ${`${order._id.toString().slice(-6)}` }
                      </td>
                      <td class="p-2 break-words">
                        ${order.orderStatus }
                      </td>
                      <td class="p-2 break-words">
                        Name : ${order.user.customerName }<br>
                          Email : ${order.user.customerEmail }
                      </td>
                      <td class="p-2 break-words">
                        Payment status : ${order.payment.paymentStatus }<br>
                          Total price : ${order.payment.totalFinalPrice }<br>
                            Payment method : ${order.payment.paymentMethod }<br>
                      </td>
                      <td class="p-2 break-words">
                        <button class="bg-green-500 text-white py-1 px-2 rounded hover:bg-green-600"
                          onclick="viewDetailsModal('${order._id }')">
                          View
                        </button>
                        ${order.orderItems.some(item => item.status === 'Return Requested')?
                          `<button onclick="viewReturnRequests('${order._id }')"
                            class="bg-green-500 text-white py-1 px-2 rounded hover:bg-green-600">
                            Return
                          </button>`:''}
                      </td>
                    </tr>
                    `
           )).join(''); 
        }
      //pagination
      const paginationContainer=document.getElementById('pagination-container');
      paginationContainer.innerHTML='';
     let html=` 
             ${data.currentPage>1 ?`
               <a onclick="setPaginationDetails(${data.currentPage-1},9)"
            class="bg-[#222] text-white px-3 py-1 mx-1 rounded-md hover:bg-indigo-600 cursor-pointer" >Previous</a>
            `: ''}
            `;
         for (let i=1; i <=data.totalPages; i++) {
          html+=    `<a onclick="setPaginationDetails(${i},9)"
                class="${data.currentPage === i ? 'bg-indigo-500' : 'bg-[#222]'} text-white px-3 py-1 mx-1 rounded-md hover:bg-indigo-600 cursor-pointer"
                >
                ${i}
              </a>`;
            }
              
           html+= `${data.currentPage<data.totalPages ?
                 `<a onclick="setPaginationDetails(${data.currentPage+1},9)"
                    class="bg-[#222] text-white px-3 py-1 mx-1 rounded-md hover:bg-indigo-600 cursor-pointer"
                    >Next</a>`:''}`
        paginationContainer.innerHTML=html;

    }}catch (error){
      console.error("error applying filters", error);
      Swal.fire("Error", error.message || "Error In Filtering Products", "error");
    }
  }
  
 
//----------------------------------------Pagination---------------------------------------------
async function setPaginationDetails(page,limit){
const url=`/admin/orders?page=${page}&limit=${limit}`
applySearch(url);
}

</script>