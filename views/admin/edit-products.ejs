<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Edit Product</title>
  <link rel="stylesheet" href="/style.css">
  <link href="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>

<body class="bg-gray-900 text-white">

  <!-- Header partial -->
  <%-include('../partials/admin-header') %>
    <div class="flex">
      <%- include('../partials/admin-sidebar') %>

        <!-- Main Content -->
        <div class="w-4/5 p-6">
          <h3 class="text-2xl font-semibold">Edit Product</h3>
          <div class="bg-gray-800 rounded-lg p-6 mt-6">
            <form action="/admin/products/<%=product._id%>" id="productForm" class="space-y-6">
              <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                <div>
                  <label for="productName" class="block text-sm font-medium">Product Name</label>
                  <input type="text" id="productName" name="productName" placeholder="Enter product name"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    value="<%= product.productName %>" required>
                </div>
                <div>
                  <label for="stock" class="block text-sm font-medium">Stock</label>
                  <input type="number" id="stock" name="stock" placeholder="Enter stock quantity"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    value="<%= product.stock %>" required>
                </div>
                <div>
                  <label for="price" class="block text-sm font-medium">Price</label>
                  <input type="number" id="price" name="price" placeholder="Enter price"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    value="<%= product.price %>" required>
                </div>
                <div>
                  <label for="category" class="block text-sm font-medium">Category</label>
                  <select id="category" name="category"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2">
                    <!-- <option value="">Add Category</option> -->
                    <% categories.forEach(category=> { %>
                      <option value="<%= category._id %>"
                        <%=category._id.toString()===product.category._id.toString()? 'selected' : '' %> ><%=
                          category.categoryName %>
                      </option>
                      <% }) %>
                  </select>
                </div>
                <div>
                  <label for="gender" class="block text-sm font-medium">Gender</label>
                  <select id="gender" name="gender"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2">
                    <option value="Unisex" <%=product.gender==='Unisex' ?'selected':''%>>Unisex</option>
                    <option value="Men" <%=product.gender==='Men' ?'selected':''%>>Men</option>
                    <option value="Women" <%=product.gender==='Women' ?'selected':''%>>Women</option>
                  </select>
                </div>
                <div>
                  <label for="brand" class="block text-sm font-medium">Brand Name</label>
                  <input type="text" id="brand" name="brand" placeholder="Enter brand name"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    value="<%= product.brand %>" required>
                </div>
                <div>
                  <label for="rating" class="block text-sm font-medium">Rating</label>
                  <input type="number" id="rating" name="rating" placeholder="Enter rating"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    value="<%= product.rating %>">
                </div>
                <div>
                  <label for="description" class="block text-sm font-medium">Description</label>
                  <textarea id="description" name="description" rows="3" placeholder="Enter description"
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    required><%= product.description %></textarea>
                </div>
                <div>
                  <label for="features" class="block text-sm font-medium">Features</label>
                  <p>Edit features separated by ','(comma)</p>
                  <textarea id="features" name="features" rows="3" 
                    class="w-full bg-gray-700 text-white border border-gray-600 rounded p-2"
                    required><%= product.features.join() %></textarea>
                </div>


              </div>

              <!-- Product Images -->
              <div class="mb-4">
                <label class="block text-sm text-orange-500 mb-2">Images (4 Images should be there)</label>
                <div class="flex gap-2">
                  <div class="relative w-24 h-24 bg-[#222] rounded-md overflow-hidden">
                    <input type="file" name="product_images" accept="image/*"
                      class="absolute inset-0 opacity-0 cursor-pointer" onchange="editImage(event, 0)"
                      id="imageFileInput0" />
                    <img id="imagePreview0" class="w-full h-full object-cover" alt="Preview"
                      src="<%=product.imageUrl[0]%>" />
                    <p id="placeholder0" class="flex justify-center items-center text-gray-500 text-sm h-full">
                      Upload
                    </p>
                  </div>
                  <div class="relative w-24 h-24 bg-[#222] rounded-md overflow-hidden">
                    <input type="file" name="product_images" accept="image/*"
                      class="absolute inset-0 opacity-0 cursor-pointer" onchange="editImage(event, 1)"
                      id="imageFileInput1" />
                    <img id="imagePreview1" class="w-full h-full object-cover" alt="Preview"
                      src="<%=product.imageUrl[1]%>" />
                    <p id="placeholder1" class="flex justify-center items-center text-gray-500 text-sm h-full">
                      Upload
                    </p>
                  </div>
                  <div class="relative w-24 h-24 bg-[#222] rounded-md overflow-hidden">
                    <input type="file" name="product_images" accept="image/*"
                      class="absolute inset-0 opacity-0 cursor-pointer" onchange="editImage(event, 2)"
                      id="imageFileInput2" />
                    <img id="imagePreview2" class="w-full h-full object-cover" alt="Preview"
                      src="<%=product.imageUrl[2]%>" />
                    <p id="placeholder2" class="flex justify-center items-center text-gray-500 text-sm h-full">
                      Upload
                    </p>
                  </div>
                  <div class="relative w-24 h-24 bg-[#222] rounded-md overflow-hidden">
                    <input type="file" name="product_images" accept="image/*"
                      class="absolute inset-0 opacity-0 cursor-pointer" onchange="editImage(event, 3)"
                      id="imageFileInput3" />
                    <img id="imagePreview3" class="w-full h-full object-cover" alt="Preview"
                      src="<%=product.imageUrl[3]%>" />
                    <p id="placeholder3" class="flex justify-center items-center text-gray-500 text-sm h-full">
                      Upload
                    </p>
                  </div>
                </div>
              </div>

              <!-- <div id="imagePreview" class="grid grid-cols-2 md:grid-cols-4 gap-4 mt-4">
               Preview images will appear here 
            </div>  -->

              <div id="loadingIndicator" class="hidden mt-4 flex items-center gap-2">
                <div
                  class="spinner-border animate-spin inline-block w-8 h-8 border-4 border-gray-600 border-t-blue-500 rounded-full">
                </div>
                <span class="text-gray-400">Uploading images...</span>
              </div>

              <button type="submit"
                class="w-full bg-orange-500 hover:bg-orange-600 text-white font-semibold rounded p-2">Edit
                Product</button>
            </form>
          </div>
        </div>
    </div>
    <!-- footer section -->
    <%- include('../partials/admin-footer')%>
      <!-- Crop Modal -->
      <div id="cropModal" class="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center hidden">
        <div class="bg-gray-800 rounded-lg overflow-hidden w-3/4 max-w-3xl">
          <div class="p-4 flex justify-between items-center border-b border-gray-700">
            <h3 class="text-lg font-semibold">Crop Image</h3>
            <button onclick="closeCropModal()" class="text-gray-400 hover:text-white">&times;</button>
          </div>
          <div class="p-4">
            <img id="cropImage" class="max-h-96 mx-auto" />
          </div>
          <div class="p-4 flex justify-end gap-4">
            <button onclick="closeCropModal()"
              class="bg-gray-600 hover:bg-gray-700 text-white rounded p-2">Cancel</button>
            <button onclick="applyCrop()" class="bg-blue-500 hover:bg-blue-600 text-white rounded p-2">Crop &
              Save</button>
          </div>
        </div>
      </div>

      <script src="https://cdnjs.cloudflare.com/ajax/libs/cropperjs/1.5.12/cropper.min.js"></script>

</body>

</html>
<script>

  //let uploadedImages = [];
  let imageFileInput;
  let imagePreview;
  let cropper;
  let selectedFile;
  let indexEditing;
  let indicesEdited = [];
  let editedImages = new Array(4);
  function editImage(event, index) {

    imageFileInput = document.getElementById(`imageFileInput${index}`);
    imagePreview = document.getElementById(`imagePreview${index}`);
    indexEditing = index;

    selectedFile = event.target.files[0];



    // Show the crop modal
    openCropModal(selectedFile);
  }
 
  function openCropModal(file) {

    document.getElementById("cropModal").classList.remove("hidden");
    const cropImage = document.getElementById("cropImage");

    const reader = new FileReader();
    reader.onload = function (e) {
      cropImage.src = e.target.result;
      if (cropper) {
        cropper.destroy();
      }
      cropper = new Cropper(cropImage, {
        aspectRatio: 1,
        viewMode: 1,
        background: false,
        zoomable: true,
        scalable: false,
      });
    };
    reader.readAsDataURL(file);


  }

 
  function closeCropModal() {
    document.getElementById("cropModal").classList.add("hidden");
    if (cropper) {
      cropper.destroy();
      cropper = null;
    }

  }


  function applyCrop() {
    if (cropper) {
      cropper
        .getCroppedCanvas({
          maxWidth: 1024,
          maxHeight: 1024,
          fillColor: "#fff",
        })
        .toBlob(
          (blob) => {
            //uploadedImages.push(blob);
            const file = new File([blob], `image_${indexEditing}.jpg`, { type: 'image/jpeg' });

            //imageFileInput.value=file;
            imagePreview.src = URL.createObjectURL(blob);
            if (!indicesEdited.includes(indexEditing)) {
              indicesEdited.push(indexEditing);
              editedImages[indexEditing] = blob;
            }
          },
          "image/jpeg",
          0.8
        );
    }
    closeCropModal();
  }

  function validateForm(formData) {
    let { productName, brand, gender, stock, price, description, specifications, category, rating } = Object.fromEntries(formData.entries());
    price=parseFloat(price);
    stock=parseFloat(stock);
    rating=parseFloat(rating); 
    const errors = [];
    if (!productName || typeof productName !== 'string') {
      errors.push('product name is required and must be a string');
    }
    if (!brand || typeof brand !== 'string') {
      errors.push('brand is required and must be a string');
    }
    if (!gender || typeof gender !== 'string') {
      errors.push('gender is required and must be a string');
    }
    if (!description || typeof description !== 'string') {
      errors.push('description is required and must be a string');
    }
    if (!category || typeof category !== 'string') {
      errors.push('category is required and must be a string');
    }
    if (!price || typeof price !== 'number' || price < 0) {
      errors.push('Price should be a positive number');
    }
    if (!stock || typeof stock !== 'number' || stock < 0) {
      errors.push('stock should be a positive number');
    }
    if (!rating || typeof rating !== 'number' || rating < 0 || rating>5) {
      errors.push('rating should be a positive number');
    }
    return errors;
  }




  document.getElementById("productForm").addEventListener("submit", async function (e) {
    e.preventDefault();


    const loadingIndicator = document.getElementById("loadingIndicator");
    loadingIndicator.classList.remove("hidden");
    const formData = new FormData();


    formData.append(
      "productName",
      document.getElementById("productName").value
    );
    formData.append("brand", document.getElementById("brand").value);
    formData.append("gender", document.getElementById("gender").value);
    formData.append("stock", document.getElementById("stock").value);
    formData.append("price", document.getElementById("price").value);
    formData.append("description", document.getElementById("description").value);
    const featuresString=document.getElementById("features").value?.trim();
    let featuresArray =[];
    if(featuresString && typeof featuresString ==="string"){
      featuresArray =featuresString.split(',');
      featuresArray =featuresArray.map((element)=>element.trim());
      featuresArray =featuresArray.filter((element)=>element!=='');
    }
    formData.append("features", JSON.stringify(featuresArray));
    formData.append("category", document.getElementById("category").value);
    formData.append("rating", document.getElementById("rating").value);

    indicesEdited.forEach((value) => {

      formData.append("imageFiles", editedImages[value], `image_${value}.jpg`)
    });
    formData.append("indicesEdited", JSON.stringify(indicesEdited));

    let errors = validateForm(formData);
    if (errors && errors.length > 0) {
      loadingIndicator.classList.add("hidden");
      errors = errors.join(',')
      Swal.fire("Error", errors, 'error');
      return
    }
    console.log("afisudlfdskjl")
console.log(this.action)
    try {
      const response = await fetch(this.action, {
        method: "PUT",
        body: formData,
      });
      if (response.ok) {
        const result = await response.json();
        const userConfirmation = await Swal.fire({ title: 'Success', icon: 'success', text: result.message || 'Product Edited successfully', confirmButtonText: 'OK' })
        if (userConfirmation.isConfirmed) {
          location.reload();
        }
      } else {
        const result = await response.json();
        if(result.validationErrors !==undefined){
          const errorHtml=result.validationErrors.join("</br>")
          Swal.fire({title:'Failed',icon:'error',html:errorHtml})
        }else{
        Swal.fire({ title: 'Failed', icon: 'error', text: result.message || 'Product Editing Failed.Please Try Again Later', confirmButtonText: 'OK' })
        }
      }
    } catch (error) {
      Swal.fire({ title: "Error", icon: "error", text: error.message || "An Unexected Error Occured.Please Try again.Later", confirmButtonText: "OK" })
    } finally {
      loadingIndicator.classList.add("hidden");
    }

  });

</script>